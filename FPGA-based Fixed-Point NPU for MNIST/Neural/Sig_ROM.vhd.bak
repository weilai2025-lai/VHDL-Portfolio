library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.nn_config.all;

entity Sig_ROM is
	generic(
		inWidth :integer:=SIGMOID_SIZE;
		dataWidth :integer:=16;
		sigmoid_file :string :="sigContent.mif";
	);
	port(
		clk :in std_logic;
		x :in std_logic_vector(inWidth-1 downto 0);
		output :out std_logic_vector(dataWidth-1 downto 0);
	);

end entity Sig_ROM ;

architecture behavior of Sig_ROM is
	type mem is array(0 to (2**inWidth)-1) of std_logic_vector(dataWidth-1 downto 0);
	signal mem_s :mem;
begin
	attribute ram_init_file of mem_s :signal is sigmoid_file;
	--map value according file--
	map_value: process(clk)
	variable tmp: std_logic_vector(dataWidth-1 downto 0);
	begin
	if (signed(x) >=0) then
		tmp := x + (2**(inWidth-1));
	else
		tmp := x - (2**(inWidth-1));
	end if;
	output <= mem_s(tmp);
	end process map_value;
end architecture behavior;