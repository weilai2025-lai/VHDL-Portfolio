library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.nn_config.all;

entity Weight_Memory is
	generic(
		layerNo :integer:=1;
		neuronNo :integer:=5;
		numWeight :integer:=3;
		addressWidth :integer:=10;
		weightFile :string :="w_1_15.mif"
	);
	port(
		clk, wen, ren :in std_logic;
		wadd :in std_logic_vector(addressWidth-1 downto 0);
		radd :in std_logic_vector(addressWidth-1 downto 0);
		win :in std_logic_vector(DATA_WIDTH-1 downto 0);
		wout : out std_logic_vector(DATA_WIDTH - 1 downto 0)
	);
end entity Weight_Memory;

architecture behavior of Weight_Memory is
	type memory_t is array (0 to numWeight-1) of std_logic_vector(DATA_WIDTH-1 downto 0);
	signal mem : memory_t;
begin

	RAM_MODE: if PRETRAINED = false generate
		write_process:process(clk)
		begin
			if rising_edge(clk) then
				if wen = '1' then
					mem(to_integer(unsigned(wadd))) <= win;
				end if;
			end if;
		end process write_process;
	end generate RAM_MODE;
	
	read_process:process(clk)
	begin
		if rising_edge(clk) then
			if ren = '1' then
				wout <= mem(to_integer(unsigned(radd)));
			end if;
		end if;
	end process read_process;

end architecture behavior;